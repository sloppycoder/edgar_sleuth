import json
import logging
import logging.config
import sys
from pathlib import Path
from typing import Iterator

import click

from edgar import SECFiling

from . import chunk_filing, get_embeddings

MAX_ERRORS = 5

logger = logging.getLogger(__name__)

logger_config_path = Path.cwd() / "logger_config.json"
if logger_config_path.exists():
    with open(logger_config_path, "r") as f:
        logging.config.dictConfig(json.load(f))


def create_filing(
    cik: str = "", accession_number: str = "", idx_filename: str = ""
) -> SECFiling:
    if idx_filename:
        return SECFiling(idx_filename=idx_filename)
    else:
        return SECFiling(cik=cik, accession_number=accession_number)


def enumerate_filings(batch: str) -> Iterator[SECFiling]:
    if batch.startswith("@"):
        with open(batch[1:], "r") as f:
            lines = f.readlines()
            lines = [
                line.strip()
                for line in lines
                if line.strip() and not line.startswith("#")
            ]
    else:
        lines = [batch]

    for line in lines:
        try:
            entry = json.loads(line)
            if entry.get("idx_filename"):
                yield SECFiling(idx_filename=entry["idx_filename"])
            elif entry.get("cik") and entry.get("accession_number"):
                yield SECFiling(
                    cik=entry["cik"],
                    accession_number=entry["accession_number"],
                )
            else:
                print(f"ERROR: Ignored invalid entry: {entry}")
        except json.JSONDecodeError:
            print(f"ERROR: invalid json {line}")


@click.command()
@click.argument(
    "action",
    type=click.Choice(["chunk", "embed", "extract"], case_sensitive=False),
)
@click.option(
    "--refresh",
    is_flag=True,
    help="""
Run the predesccor steps prior to the action, e.g.
embedding depends on data generated by chunk, if refresh is set,
chunk will be run before embedding""",
)
@click.option(
    "--batch",
    help="""JSON string filings to process:
@<jsonl_file> with list of filings or inline string like\n
'{"cik": "1035018", "accession_number": "0001193125-20-000327"}"
'{"idx_filename": "edgar/data/1002427/0001133228-24-004879.txt"}"
""",
)
@click.option(
    "--tags",
    required=False,
    help="tags to assocate database records created by the run",
)
@click.option("--dryrun", is_flag=True, help="Print filing only, does not run any action")
def main(
    action: str,
    dryrun: bool,
    refresh: bool,
    batch: str,
    tags: str,
) -> None:
    # hard coded values for now
    text_table_name = "filing_text_chunks"
    embedding_table_name = "filing_chunks_embeddings"
    form_type = "485BPOS"

    data_tags = tags.split(",") if tags else []

    n_errors = 0

    for filing in enumerate_filings(batch):
        if dryrun:
            print(filing)
            continue

        if n_errors > MAX_ERRORS:
            print(f"Aborting after reaching max errors: {MAX_ERRORS}")
            break

        if action == "chunk" or (action in ["extract", "embed"] and refresh):
            n_chunks = chunk_filing(
                filing=filing,
                form_type=form_type,
                tags=data_tags,
                table_name=text_table_name,
            )
            if n_chunks > 1:
                print(
                    f"{filing} {form_type} splitted into {n_chunks} chunks"  # noqa E501
                )
            else:
                print(f"Error when splitting {filing} {form_type}")
                n_errors += 1

        elif action == "embedding" or (action in ["extract"] and refresh):
            n_chunks = get_embeddings(
                text_table_name=text_table_name,
                cik=filing.cik,
                accession_number=filing.accession_number,
                tags=data_tags,
                embedding_table_name=embedding_table_name,
            )
            if n_chunks > 1:
                print(f"Saved {n_chunks} embeddings for {filing} {form_type}")
            else:
                print(f"Error when get embeddings for {filing} {form_type}")
                n_errors += 1

        elif action == "extract":
            print("extraction not yet implemented")

        else:
            print(f"Unknown action {action}")


if __name__ == "__main__":
    main(sys.argv[1:])
